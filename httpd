#!/usr/bin/env bash

set -euo pipefail

readonly CONF_FILE=httpd.conf

# Following variables are in sync with configuration file.
readonly SERVER_ROOT=.
readonly MODULES=modules
readonly LOGDIR=logs
readonly PID_FILE=$LOGDIR/httpd.pid
readonly HTDIGEST=.htdigest
readonly DOCUMENT_ROOT=document_root

readonly HTTPD=${HTTPD:-/usr/sbin/httpd}

WORK_DIR=$(cd "$(dirname "$0")" >/dev/null; pwd)
readonly WORK_DIR

help() {
  echo "Usage: $0 start|foreground|stop|restart"
  exit 0
}

start() {
  local pid

  if [[ -f "$PID_FILE" ]]; then
    pid=$(cat "$PID_FILE")

    if $(kill -0 $pid 2>/dev/null); then
      echo "$PID_FILE already exists, please check the process pid=$pid" >&2
      exit 1
    else
      echo "pid=$pid not found, remove $PID_FILE..."
      rm "$PID_FILE"
    fi
  fi

  echo "Starting $HTTPD..."
  "$HTTPD" -d "$SERVER_ROOT" -f "$CONF_FILE" "$@"

  echo -n "Waiting.."
  local wating_count=0
  while [[ ! -f "$PID_FILE" ]]; do
    echo -n "."
    if (( wating_count < 60 )); then
      wating_count=$(( wating_count + 1 ))
      sleep 1
    else
      echo
      echo "$PID_FILE not found." >&2
      exit 1
    fi
  done
  echo

  pid=$(cat "$PID_FILE")

  echo "$HTTPD started pid=$pid"
}

stop() {
  if [[ -f "$PID_FILE" ]]; then
    local pid
    pid=$(cat "$PID_FILE")
    readonly pid

    echo "Stopping pid=$pid..."
    kill -TERM $pid

    echo -n "Waiting.."
    local wating_count=0
    while $(kill -0 $pid 2>/dev/null); do
      echo -n "."
      if (( wating_count < 60 )); then
        wating_count=$(( wating_count + 1 ))
        sleep 1
      else
        echo
        echo "$pid is still running." >&2
        exit 1
      fi
    done
    echo

    echo "pid=$pid stoped."
  else
    echo "$PID_FILE doesn't exist, $HTTPD may not be running now." >&2
    exit 1
  fi
}

if (( $# < 1 )); then
  help
fi

cd "$WORK_DIR"

if [[ ! -f $HTDIGEST ]]; then
  echo "Please make $HTDIGEST before running httpd." >&2
  exit 1
fi
if [[ ! -d $MODULES ]]; then
  echo "Please symlink $MODULES from where apache modules exist before running httpd." >&2
  exit 1
fi
if [[ ! -d $LOGDIR ]]; then
  mkdir "$LOGDIR"
fi
if [[ ! -e $DOCUMENT_ROOT ]]; then
  mkdir "$DOCUMENT_ROOT"
fi

case $1 in
  start)
    start
    ;;
  foreground)
    start -DFOREGROUND
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Unknown command $1" >&2
    exit 1
    ;;
esac
